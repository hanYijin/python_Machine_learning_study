# contour(윤곽선)
# 영상이나 이미지의 윤곽선(컨투어)을 검출하기 위해 사용합니다.
# 영상이나 이미지에서 외곽과 내곽의 윤곽선(컨투어)을 검출할 수 있습니다.

#윤곽선(컨투어)를 검출하는 주된 요소는 하얀색의 객체를 검출합니다.

def extract_chars(img):
    chars = []
    colors = [BLUE,GREEN,RED]
    for color in colors:
        imgs = getcolors(img.copy(),color)

# 흑백처리
# 윤곽선(컨투어)를 검출하는 주된 요소는 하얀색의 객체를 검출
# 배경은 검은색이며 검출하려는 물체는 하얀색의 성질을 띄게끔 변형합니다. 
        gray_imgs = cv2.cvtColor(imgs,cv2.COLOR_BGR2GRAY)   
        ret, thre_imgs = cv2.threshold(gray_imgs,127,255,0) 
#ret, thre_imgs = cv2.threshold(gray_imgs,127,255,cv2.THRESH_BINARY)
# (원본이미지, 임계값, 임계값 이상일 경우 바꿀 최대값(흰색: 255로 지정), THRESH_BINARY)
#THRESH_BINARY는 픽셀값이 임계값보다 클 경우 최대값으로 작을 경우 0(검은색)으로 이진화

	
#cv2.findContours(이진화 이미지, 검색 방법, 근사화 방법)를 이용하여 이진화 이미지에서 윤곽선(컨투어)를 검색합니다.
#반환값으로 윤곽선, 계층 구조를 반환
#윤곽선은 Numpy 구조의 배열로 검출된 윤곽선의 지점들이 담겨있습니다.
#계층 구조는 윤곽선의 계층 구조를 의미합니다. 각 윤곽선에 해당하는 속성 정보들이 담겨있습니다.

        contours, _ = cv2.findContours(thre_imgs,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
#검색방법: cv2.RETR_EXTERNAL : 외곽 윤곽선만 검출하며, 계층 구조를 구성하지 않습니다.
#근사화 방법: cv2.CHAIN_APPROX_SIMPLE : 윤곽점들 단순화 수평, 수직 및 대각선 요소를 압축하고 끝점만 남겨 둡니다.
       
       for contour in contours:
#cv2.drawContours()을 이용하여 검출된 윤곽선을 그립니다.
            cv2.drawContours(gray_imgs, contour,0,(0,0,255),2) 

            # cv2.imshow('text',gray_imgs)
            # cv2.waitKey(0)

#cv2.contourArea() 외곽선이 감싸는 영역의 면적을 반환합니다.
            area = cv2.contourArea(contour)
            if area > 50:
#cv2.boundingRect(외곽선 좌표) 주어진 점을 감싸는 최소 크기 사각형(바운딩 박스)를 반환합니다.
#반환값: 사각형 정보. (x, y, w, h) 튜플
                x,y,width,height = cv2.boundingRect(contour)
                roi = gray_imgs[y:y+height, x:x+width]
                chars.append((x,roi))
                # cv2.imshow('roi',roi)
                # cv2.waitKey(0)

    chars = sorted(chars, key = lambda char:char[0])
    return chars

---------------------------------------------------------------------------
# cv2.findContours(이진화 이미지, 검색 방법, 근사화 방법)
검색 방법
cv2.RETR_EXTERNAL : 외곽 윤곽선만 검출하며, 계층 구조를 구성하지 않습니다.

cv2.RETR_LIST : 모든 윤곽선을 검출하며, 계층 구조를 구성하지 않습니다.

cv2.RETR_CCOMP : 모든 윤곽선을 검출하며, 계층 구조는 2단계로 구성합니다.

cv2.RETR_TREE : 모든 윤곽선을 검출하며, 계층 구조를 모두 형성합니다. (Tree 구조)

근사화 방법
cv2.CHAIN_APPROX_NONE : 윤곽점들의 모든 점을 반환합니다.

cv2.CHAIN_APPROX_SIMPLE : 윤곽점들 단순화 수평, 수직 및 대각선 요소를 압축하고 끝점만 남겨 둡니다.

cv2.CHAIN_APPROX_TC89_L1 : 프리먼 체인 코드에서의 윤곽선으로 적용합니다.

cv2.CHAIN_APPROX_TC89_KCOS : 프리먼 체인 코드에서의 윤곽선으로 적용합니다
_____________________________________________________________________________________________________________
make_train_data.py
--------------------
import cv2
import utils
import os

imgs = cv2.imread('images/d0.png', cv2.IMREAD_COLOR)
chars=utils.extract_chars(imgs)

for char in chars:
    cv2.imshow('char[1]',char[1])
    input = cv2.waitKey(0)
    resized= utils.resized20(char[1])
    print('input',input)
    print('input -48',input-48)
    # +: a , -:b , *: c
    if input >= 48 and input <= 57:
        name = str(input - 48)
        # print('len(next(os.walk(./training_data/+ name + /))[2]')
        # print( len(next(os.walk('./training_data/' + name + '/'))[2]))
        if not os.path.isdir('./training_data'):
            os.makedirs('./training_data')
        if not os.path.isdir('./training_data/' + name):
            os.makedirs('./training_data/' + name)
        file_count = len(next(os.walk('./training_data/' + name + '/'))[2])
        cv2.imwrite('./training_data/' + str(input - 48) + '/' +
                    str(file_count + 1) + '.png', resized)
    elif input == ord('a') or input == ord('b') or input == ord('c'):

        #파이썬 내장함수 ord(c)는 문자의 유니코드 값을 돌려주는 함수이다.
        name = str(input - ord('a') + 10) #>>> ord('a'): 97
        if not os.path.isdir('./training_data'):
            os.makedirs('./training_data')
        if not os.path.isdir('./training_data/' + name):
            os.makedirs('./training_data/' + name)
        file_count = len(next(os.walk('./training_data/' + name + '/'))[2])
        cv2.imwrite('./training_data/' + name + '/' +
                    str(file_count + 1) + '.png', resized)
